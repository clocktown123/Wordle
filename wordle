import pygame
import sys
import wonderwords
from wonderwords import RandomWord

# Initialize Pygame
pygame.init()

# Set up display
screen = pygame.display.set_mode((800, 900))
pygame.display.set_caption('Text Box Example')

Rword = RandomWord().word(word_min_length = 5, word_max_length = 5)
Answer = Rword.upper()
print(Answer)
# Define colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)


# Set up font
font = pygame.font.Font(None, 36)

# Text box variables
input_text = ''
active = True

MARGIN = 10
T_MARGIN = 140
B_MARGIN = 100
LR_MARGIN = 100

GREY = (70,70,80)
GREEN = (6, 214, 160)
YELLOW = (255, 209, 102)

SQ_SIZE = (600-4*MARGIN-2*LR_MARGIN) // 5

#guesses left
tries = 6

#text on the screen
text_font = pygame.font.SysFont("Sans", 30, bold = True)

def draw_text(text, font, text_col, tx, ty):
    img = font.render(text, True, text_col)
    screen.blit(img, (tx, ty))

guesses = []


Alphabet = "ABCDEFGHIJKLNMOPQRSTUVWXYZ"




def determine_color(guess, Answer, j):
    letter = guess[j]
    if letter == Answer[j]:
        return GREEN
    elif letter in Answer:
        n_target = Answer.count(letter)
        n_correct = 0
        n_occurrence = 0
        # Count correct letters
        for i in range(len(guess)):
            if guess[i] == letter:
                if i < j:
                    n_occurrence += 1
                elif letter == Answer[i]:
                    n_correct += 1
        if n_target > n_correct + n_occurrence:
            return YELLOW
    return GREY

def Alphabet_colors(guesses, Answer):
    # Create a dictionary to store the color of each letter
    letter_colors = {letter: BLACK for letter in Alphabet}  # Default color is gray

    # Check each guess
    for guess in guesses:
        for j, letter in enumerate(guess):
            if letter == Answer[j]:
                letter_colors[letter] = GREEN
            elif letter in Answer and letter_colors[letter] != GREEN:
                letter_colors[letter] = YELLOW
            elif letter not in Answer and letter_colors[letter] != GREEN:
                letter_colors[letter] = GRAY
    return letter_colors

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        #active = True  # Toggle active state

        # Handle key presses
        if event.type == pygame.KEYDOWN:
            if active:
                if event.key == pygame.K_RETURN:  # Submit on Enter
                    if len(input_text) == 5:
                        print("User input:", input_text)
                        guesses.append(input_text)
                        input_text = ''  # Clear input after submission
                        tries -= 1
                elif event.key == pygame.K_BACKSPACE:  # Handle backspace
                    input_text = input_text[:-1]
                else:
                    input_text += event.unicode.upper()  # Add character to input_text
        
        #logic section
        
    
    # Fill screen with white
    screen.fill(WHITE)

    text_surface = font.render(input_text, True, BLACK)

    #letters = font.render(notGuessed, False, GREY)
    #surface = letters.get_rect(center = (600//2, T_MARGIN//2))
    #screen.blit(letters, surface)
    
    y = T_MARGIN
    for i in range(6):
        x = LR_MARGIN + 100
        for j in range(5):
            square = pygame.Rect(x, y, SQ_SIZE, SQ_SIZE)
            pygame.draw.rect(screen, GREY, square, width=2, border_radius = 3)
            
            #background color
            if i < len(guesses):
                color = determine_color(guesses[i], Answer, j)
                pygame.draw.rect(screen, color, square, border_radius = 3)
                letter = font.render(guesses[i][j], False, (255,255,255))
                surface = letter.get_rect(center = (x+SQ_SIZE//2, y+SQ_SIZE//2))
                screen.blit(letter, surface)
            
            if i == len(guesses) and j < len(input_text):
                letter = font.render(input_text[j], False, GREY)
                surface = letter.get_rect(center = (x+SQ_SIZE//2, y+SQ_SIZE//2))
                screen.blit(letter, surface)

        
            
            x += SQ_SIZE + MARGIN
        y += SQ_SIZE + MARGIN
    
    letter_colors = Alphabet_colors(guesses, Answer)
    xpos = 20
    ypos = 800

    for i, letter in enumerate(Alphabet):
        color = letter_colors[letter]
        letter_surface = font.render(letter, True, color)
        screen.blit(letter_surface, (xpos + i * 30, ypos))

    
    
    draw_text("tries left: ", text_font, (0,0,0), 320, 50)
    draw_text(str(int(tries)), text_font, (0,0,0), 460, 50)
    
    if tries == 0:
        draw_text(Answer, text_font, (0,0,0), 320, 750)
    elif Answer in guesses:
        draw_text(Answer, text_font, (0,0,0), 320, 750)
        
    pygame.display.flip()
